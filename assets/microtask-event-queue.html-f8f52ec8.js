import{_ as t,r as p,o,c,b as n,d as s,e,a as i}from"./app-6cff156c.js";const l={},r=n("h1",{id:"任务执行顺序-理解还是有些朦胧",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#任务执行顺序-理解还是有些朦胧","aria-hidden":"true"},"#"),s(" 任务执行顺序(理解还是有些朦胧)")],-1),u=n("p",null,"setTimeout 创建一个任务队列中的等待执行的任务，所谓的异步只不过是假象",-1),d={href:"https://blog.csdn.net/u014756827/article/details/52644737",target:"_blank",rel:"noopener noreferrer"},k=i(`<h2 id="宏任务" tabindex="-1"><a class="header-anchor" href="#宏任务" aria-hidden="true">#</a> 宏任务</h2><p>产生条件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>script 全部代码、setTimeout、setInterval、setImmediate（浏览器暂时不支持，只有 <span class="token constant">IE10</span> 支持，具体可见 <span class="token constant">MDN</span>）、<span class="token constant">I</span><span class="token operator">/</span><span class="token constant">O</span>、<span class="token constant">UI</span> Rendering
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行场景</p><p>执行来自任务队列中的任务时，在每一次新的事件循环开始迭代的时候运行时都会执行队列中的每个任务。在每次迭代开始之后加入到队列中的任务需要在下一次迭代开始之后才会被执行.</p><p>举个例子:</p><p>代码已经开始执行(迭代开始)，执行过程中 setTimeout 创建一个延时任务, 所以创建的延时任务只能等到下一次迭代开始才会执行</p><h2 id="微任务" tabindex="-1"><a class="header-anchor" href="#微任务" aria-hidden="true">#</a> 微任务</h2><p>产生条件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Process<span class="token punctuation">.</span>nextTick <span class="token comment">//（Node独有）</span>
Promise
Object<span class="token punctuation">.</span>observe <span class="token comment">//废弃)</span>
MutationObserver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行场景</p><ul><li><p>普通任务结束之后</p></li><li><p>微任务可以添加新的微任务到队列中，并在下一个任务开始执行之前且当前事件循环结束之前执行完所有的微任务</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行顺序</p><p>script start =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</p><p><img src="https://cdn.jsdelivr.net/gh/azhen98/A-week-to-learn@assert/image/20210914114949.png" alt="20210914114949"></p><p>解释:</p><p>Tasks 任务队列</p><p>microtasks 微任务队列</p><p>js stack js 调用栈</p><p>log 控制台输出</p><p>run script : 代码从上往下正常执行</p><p>script: 当前代码的调用栈(就是从上往下执行)</p><p>在图中, <code>run script</code> 在执行逻辑中创建了微任务和新的 <code>setTimeout callback</code>，当 <code>script</code> 执行结束后（此时执行栈为空,任务执行完毕），执行微任务队列，微任务执行完毕之后, 然后继续执行排队的任务(迭代)</p>`,24),m={href:"https://azhen98.github.io/A-week-to-learn/index.html",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"解释",-1),h=n("p",null,"执行任务",-1),g=n("p",null,[n("img",{src:"https://cdn.jsdelivr.net/gh/azhen98/A-week-to-learn@assert/image/20210913164618.png",alt:"20210913164618"})],-1),_=n("p",null,"任务执行过程中加入了等待的新任务和微任务，现在执行微任务(当调用栈为空时执行微任务)",-1),b=n("p",null,[n("img",{src:"https://cdn.jsdelivr.net/gh/azhen98/A-week-to-learn@assert/image/20210913164720.png",alt:"20210913164720"})],-1),f=n("p",null,"微任务执行完成后， 开始执行任务队列",-1),j=n("p",null,[n("img",{src:"https://cdn.jsdelivr.net/gh/azhen98/A-week-to-learn@assert/image/20210913164806.png",alt:"20210913164806"})],-1),x={href:"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide",target:"_blank",rel:"noopener noreferrer"};function I(w,N){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,u,n("p",null,[n("a",d,[s("setTimeout 真的是异步吗"),e(a)])]),k,n("p",null,[n("a",m,[s("执行流程图示"),e(a)])]),v,h,g,_,b,f,j,n("p",null,[n("a",x,[s("国外博客"),e(a)])]),n("p",null,[n("a",T,[s("MDN"),e(a)])])])}const A=t(l,[["render",I],["__file","microtask-event-queue.html.vue"]]);export{A as default};
